// Mocks generated by Mockito 5.4.2 from annotations
// in state_notifier_practice/test/notifier/search_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:state_notifier_practice/data/repository/search_repository.dart'
    as _i2;
import 'package:state_notifier_practice/search/search_usecase.dart' as _i3;

import 'search_notifier_test.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSearchRepository_0 extends _i1.SmartFake
    implements _i2.SearchRepository {
  _FakeSearchRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SearchUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchUseCase extends _i1.Mock implements _i3.SearchUseCase {
  MockSearchUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SearchRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeSearchRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.SearchRepository);
  @override
  _i4.Future<List<String>> call(String? keyword) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [keyword],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);
}

/// A class which mocks [ChangeListener].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangeListener<T> extends _i1.Mock implements _i5.ChangeListener<T> {
  MockChangeListener() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void call(
    T? previous,
    T? next,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #call,
          [
            previous,
            next,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
